class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        //prefix sum
        //make an array with elemnts with prefix sum moded to k
        //add them first then mod them and check if they are already present
        vector<int> prefix;
        int cur_sum = 0;
        int ans = 0;
        unordered_map<int, int> mp;
        mp[0] = 1;
        for(int i=0 ; i<nums.size(); i++){
            cur_sum += nums[i];
            int mod = cur_sum%k;
            if(mod < 0) mod+=k;
            if(mp.find(mod) != mp.end()){
                ans += mp[mod];
            }
            mp[mod]++;
        }
        return ans;
        //brute force
        // int count = 0;
        // for (int i=0 ; i< nums.size() ; i++){
        //     int sum = 0;
        //     for(int j=i; j<nums.size() ; j++){
        //         sum += nums[j];
        //         if(sum%k == 0) count++;
        //     }
        // }
    }
};
/*
4 5 0 -2 -3 1
4 9 9  7  4 5
ans +1 +2 +3 +1
5
0
5 0
-2 -3 
-2 -3 5
5 0 -2 -3
4 5 0 -2 -3 1
*/
